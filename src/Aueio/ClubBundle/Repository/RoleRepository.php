<?php

namespace Aueio\ClubBundle\Repository;

use Doctrine\ORM\EntityRepository,
	Aueio\ClubBundle\Entity\Team;

/**
 * ActionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RoleRepository extends EntityRepository
{
	public function getTeamStats(Team $team)
	{
		$stats = array();
		foreach ( array("local", "visitor", "giveup") as $type ){
			$stats[$type] = $this->findTypeByTeam($team, $type, true);
		}
		foreach ( array("win", "lost", "nul") as $result ){
			$stats[$result] = $this->findResultByTeam($team, $result, true);
		}
		$stats['total'] = $this->findPlayedGameByTeam($team, true);
		
		return $stats;
	}
	public function findTypeByTeam(Team $team, $type, $count = false){
		
		$builder = $this->createQueryBuilder('r')
		->join('r.team', 't')
		->join('r.game', 'g')
		->where('t.id = :id_team')
		->andWhere('r.type = :type')
		->andWhere('g.date < :now')
		->setParameters(array(
				'id_team' => $team->getId(),
				'type' => $type,
				'now' => new \Datetime('now')
		));
		if($count){
			$builder->select('count(r.id)')->setMaxResults(1);
			return $builder->getQuery()->getSingleScalarResult();
		}else{
			return $builder->getQuery()->getResult();
		}
	}
	public function findResultByTeam(Team $team, $result, $count = false){
		$builder = $this->createQueryBuilder('r')
		->join('r.team', 't')
	 	->join('r.game', 'g')
		->where('t.id = :id_team')
		->andWhere('r.result = :result')
		->andWhere('g.date < :now')
		->setParameters(array(
				'id_team' => $team->getId(),
				'result' => $result,
				'now' => new \Datetime('now')
		));
		if($count){
			$builder->select('count(r.id)')->setMaxResults(1);
			return $builder->getQuery()->getSingleScalarResult();
		}else{
			return $builder->getQuery()->getResult();
		}
	}
	public function findPlayedGameByTeam(Team $team, $count = false){
		$builder = $this->createQueryBuilder('r')
		->join('r.team', 't')
		->join('r.game' , 'g')
		->where('t.id = :id_team')
		->andWhere('g.date < :now')
		->setParameters(array(
				'id_team' => $team->getId(),
				'now' => new \DateTime('now')
		));
		if($count){
			$builder->select('count(r.id)')->setMaxResults(1);
			return $builder->getQuery()->getSingleScalarResult();
		}else{
			return $builder->getQuery()->getResult();
		}
	}
}