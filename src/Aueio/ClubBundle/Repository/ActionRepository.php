<?php

namespace Aueio\ClubBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ActionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActionRepository extends EntityRepository
{
	
	public function getStats($player_id)
	{
		$stats = array();
		foreach ( array("play", "miss", "shop", "referee","score", "save") as $type ){
			$stats[$type] = $this->findByType($player_id, $type, true);
		}
		foreach ( array("win", "lost", "nul") as $result ){
			$stats[$result] = $this->findPlayByResult($player_id, $result, true);
		}
		
		return $stats;
	}
	public function findByType($player_id, $type, $count = false){
		$builder = $this->createQueryBuilder('a')
		->join('a.player', 'p')
		->where('p.id = :id_player')
		->andWhere('a.type = :type')
		->setParameters(array(
				'id_player' => $player_id,
				'type' => $type
		));
		if($count){
			$builder->select('count(a.id)')->setMaxResults(1);
			return $builder->getQuery()->getSingleScalarResult();
		}else{
			return $builder->getQuery()->getResult();
		}
	}
	public function findByGameByType($player_id, $game_id,  $type, $count = false){
		$builder = $this->createQueryBuilder('a')
		->join('a.player', 'p')
		->join('a.game', 'g')
		->where('p.id = :id_player')
		->andWhere('g.id = :id_game')
		->andWhere('a.type = :type')
		->setParameters(array(
				'id_player' => $player_id,
				'id_game' => $game_id,
				'type' => $type
		));
		if($count){
			$builder->select('count(a.id)')->setMaxResults(1);
			return $builder->getQuery()->getSingleScalarResult();
		}else{
			return $builder->getQuery()->getResult();
		}
	}
	public function findPlayByResult($player_id, $result, $count = false){
		$builder = $this->createQueryBuilder('a')
		->join('a.player', 'p')
	 	->join('a.game', 'g')
	 	->leftJoin('g.roles', 'r')
	 	->where('p.id = :id_player')
		->andWhere("p.team = r.team")
		->andWhere("a.type = 'play'")
		->andWhere('r.result = :type')
		->setParameters(array(
				'id_player' => $player_id,
				'type' => $result
		));
		if($count){
			$builder->select('count(a.id)')->setMaxResults(1);
			return $builder->getQuery()->getSingleScalarResult();
		}else{
			return $builder->getQuery()->getResult();
		}
	}
	public function getScores($game_id, $team_id){
		return $this->createQueryBuilder('a')
		->select('count(a.id)')
		->join('a.game', 'g')
		->join('a.player', 'p')
		->join('p.team', 't')
		->where('g.id = :game_id')
		->andWhere("a.type = 'score'")
		->andWhere("t.id = :team_id")
		->setMaxResults(1)
		->setParameters(array(
				'game_id' => $game_id,
				'team_id' => $team_id
		))->getQuery()->getSingleScalarResult();
	}
	
}