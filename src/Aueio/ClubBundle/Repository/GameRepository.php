<?php

namespace Aueio\ClubBundle\Repository;

use Doctrine\ORM\EntityRepository,
	Aueio\ClubBundle\Entity\Team,
	Aueio\ClubBundle\Entity\Player,
	Aueio\ClubBundle\Entity\Season;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends EntityRepository
{
	public function findSeasonTeamNextGame(Team $team, $timestamp, Season $season, $count = false){
		$builder = $this->createQueryBuilder('g')
		->join('g.season', 's')
		->leftJoin('g.roles', 'r')
		->join('r.team', 't')
		->where('s.id = :id_season')
		->andWhere('t.id = :id_team')
		->andWhere('g.date >= :date')
		->setMaxResults(1)
		->setParameters(array(
				'id_season' => $season->getId(),
				'id_team' => $team->getId(),
				'date' => date("Y-m-d",$timestamp),
		));
		if($count){
			$builder->select('count(g.id)')->setMaxResults(1);
			return $builder->getQuery()->getSingleScalarResult();
		}else{
			try {
				$game = $builder->getQuery()->getSingleResult();
			} catch (\Doctrine\Orm\NoResultException $e) {
				$game = null;
			}
			return $game;
		}
	}
	public function findGameByTeamByDate(Team $team, $timestamp, $season_id, $count = false){
		$builder = $this->createQueryBuilder('g')
		->join('g.season', 's')
		->leftJoin('g.roles', 'r')
		->join('r.team', 't')
		->where('s.id = :id_season')
		->andWhere('t.id = :id_team')
		->andWhere('g.date = :date')
		->setMaxResults(1)
		->setParameters(array(
				'id_season' => $season_id,
				'id_team' => $team->getId(),
				'date' => date("Y-m-d",$timestamp),
		));
		if($count){
			$builder->select('count(g.id)')->setMaxResults(1);
			return $builder->getQuery()->getSingleScalarResult();
		}else{
			try {
				$game = $builder->getQuery()->getSingleResult();
			} catch (\Doctrine\Orm\NoResultException $e) {
				$game = null;
			}
			return $game;
		}
	}
	public function findNextTrainByTeam(Team $team, $now, $season_id)
	{
		$dates = array();
		foreach ($team->getSlotDays() as $slot)
		{
			$timestamp = strtotime("next {$slot}", $now);
			$game = $this->findGameByTeamByDate($team, $timestamp, $season_id, true);
			if( $game == false)
			{
				$dates[] = $timestamp;
			}
		}
		if(count($dates) == 1)
		{
			return $dates[0];
		}elseif(count($dates) > 1){
			sort($dates);
			return $dates[0];
		}else{
			return $this->findNextTrainByTeam($team, strtotime("+1 week", $now), $season_id);
		}
		
	}
	public function findWithoutActionByPlayer(Player $player, Season $season)
	{
		/*		$em = $this->getEntityManager();
		$em->getFilters()->disable('season');
		$query = $em->createQuery("SELECT g
FROM Aueio\ClubBundle\Entity\Game g
LEFT JOIN Aueio\ClubBundle\Entity\Role r WHERE r.game = g
INNER JOIN Aueio\ClubBundle\Entity\Team t WHERE t = r.team
LEFT JOIN Aueio\ClubBundle\Entity\Player p WHERE p.team = t
LEFT JOIN Aueio\ClubBundle\Entity\Action a WHERE (a.player = p AND a.game = g)
WHERE (g.season = {$season_id} AND p.id = {$player_id} AND a.id IS NULL)");
		return $query->getResult();	
*/
		return $this->getEntityManager()->getConnection()->fetchAll("SELECT g.id, g.date
FROM games g
LEFT JOIN roles r ON r.game_id = g.id
INNER JOIN teams t ON t.id = r.team_id
LEFT JOIN players p ON p.team_id = t.id
LEFT JOIN actions a ON (a.player_id = p.id AND a.game_id = g.id)
WHERE ( {$season->getId()} = g.season_id
AND p.id = {$player->getId()} AND a.id IS NULL)");
		}
}